{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fmodern\fprq1 Lucida Console;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs18\lang9 # config file for ansible -- {{\field{\*\fldinst{HYPERLINK https://ansible.com/ }}{\fldrslt{https://ansible.com/\ul0\cf0}}}}\f0\fs18\par
# ===============================================\par
\par
# nearly all parameters can be overridden in ansible-playbook\par
# or with command line flags. ansible will read ANSIBLE_CONFIG,\par
# ansible.cfg in the current working directory, .ansible.cfg in\par
# the home directory or /etc/ansible/ansible.cfg, whichever it\par
# finds first\par
\par
[defaults]\par
\par
# some basic default values...\par
\par
#inventory      = /etc/ansible/hosts\par
#library        = /usr/share/my_modules/\par
#module_utils   = /usr/share/my_module_utils/\par
#remote_tmp     = ~/.ansible/tmp\par
#local_tmp      = ~/.ansible/tmp\par
#plugin_filters_cfg = /etc/ansible/plugin_filters.yml\par
#forks          = 5\par
#poll_interval  = 15\par
#sudo_user      = root\par
#ask_sudo_pass = True\par
#ask_pass      = True\par
#transport      = smart\par
#remote_port    = 22\par
#module_lang    = C\par
#module_set_locale = False\par
\par
# plays will gather facts by default, which contain information about\par
# the remote system.\par
#\par
# smart - gather by default, but don't regather if already gathered\par
# implicit - gather by default, turn off with gather_facts: False\par
# explicit - do not gather by default, must say gather_facts: True\par
#gathering = implicit\par
\par
# This only affects the gathering done by a play's gather_facts directive,\par
# by default gathering retrieves all facts subsets\par
# all - gather all subsets\par
# network - gather min and network facts\par
# hardware - gather hardware facts (longest facts to retrieve)\par
# virtual - gather min and virtual facts\par
# facter - import facts from facter\par
# ohai - import facts from ohai\par
# You can combine them using comma (ex: network,virtual)\par
# You can negate them using ! (ex: !hardware,!facter,!ohai)\par
# A minimal set of facts is always gathered.\par
#gather_subset = all\par
\par
# some hardware related facts are collected\par
# with a maximum timeout of 10 seconds. This\par
# option lets you increase or decrease that\par
# timeout to something more suitable for the\par
# environment.\par
# gather_timeout = 10\par
\par
# Ansible facts are available inside the ansible_facts.* dictionary\par
# namespace. This setting maintains the behaviour which was the default prior\par
# to 2.5, duplicating these variables into the main namespace, each with a\par
# prefix of 'ansible_'.\par
# This variable is set to True by default for backwards compatibility. It\par
# will be changed to a default of 'False' in a future release.\par
# ansible_facts.\par
# inject_facts_as_vars = True\par
\par
# additional paths to search for roles in, colon separated\par
#roles_path    = /etc/ansible/roles\par
\par
# uncomment this to disable SSH key host checking\par
#host_key_checking = False\par
\par
# change the default callback, you can only have one 'stdout' type  enabled at a time.\par
#stdout_callback = skippy\par
\par
\par
## Ansible ships with some plugins that require whitelisting,\par
## this is done to avoid running all of a type by default.\par
## These setting lists those that you want enabled for your system.\par
## Custom plugins should not need this unless plugin author specifies it.\par
\par
# enable callback plugins, they can output to stdout but cannot be 'stdout' type.\par
#callback_whitelist = timer, mail\par
\par
# Determine whether includes in tasks and handlers are "static" by\par
# default. As of 2.0, includes are dynamic by default. Setting these\par
# values to True will make includes behave more like they did in the\par
# 1.x versions.\par
#task_includes_static = False\par
#handler_includes_static = False\par
\par
# Controls if a missing handler for a notification event is an error or a warning\par
#error_on_missing_handler = True\par
\par
# change this for alternative sudo implementations\par
#sudo_exe = sudo\par
\par
# What flags to pass to sudo\par
# WARNING: leaving out the defaults might create unexpected behaviours\par
#sudo_flags = -H -S -n\par
\par
# SSH timeout\par
#timeout = 10\par
\par
# default user to use for playbooks if user is not specified\par
# (/usr/bin/ansible will use current user as default)\par
#remote_user = root\par
remote_user = azadmin\par
# logging is off by default unless this path is defined\par
# if so defined, consider logrotate\par
#log_path = /var/log/ansible.log\par
\par
# default module name for /usr/bin/ansible\par
#module_name = command\par
\par
# use this shell for commands executed under sudo\par
# you may need to change this to bin/bash in rare instances\par
# if sudo is constrained\par
#executable = /bin/sh\par
\par
# if inventory variables overlap, does the higher precedence one win\par
# or are hash values merged together?  The default is 'replace' but\par
# this can also be set to 'merge'.\par
#hash_behaviour = replace\par
\par
# by default, variables from roles will be visible in the global variable\par
# scope. To prevent this, the following option can be enabled, and only\par
# tasks and handlers within the role will see the variables there\par
#private_role_vars = yes\par
\par
# list any Jinja2 extensions to enable here:\par
#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n\par
\par
# if set, always use this private key file for authentication, same as\par
# if passing --private-key to ansible or ansible-playbook\par
#private_key_file = /path/to/file\par
\par
# If set, configures the path to the Vault password file as an alternative to\par
# specifying --vault-password-file on the command line.\par
#vault_password_file = /path/to/vault_password_file\par
\par
# format of string \{\{ ansible_managed \}\} available within Jinja2\par
# templates indicates to users editing templates files will be replaced.\par
# replacing \{file\}, \{host\} and \{uid\} and strftime codes with proper values.\par
#ansible_managed = Ansible managed: \{file\} modified on %Y-%m-%d %H:%M:%S by \{uid\} on \{host\}\par
# \{file\}, \{host\}, \{uid\}, and the timestamp can all interfere with idempotence\par
# in some situations so the default is a static string:\par
#ansible_managed = Ansible managed\par
\par
# by default, ansible-playbook will display "Skipping [host]" if it determines a task\par
# should not be run on a host.  Set this to "False" if you don't want to see these "Skipping"\par
# messages. NOTE: the task header will still be shown regardless of whether or not the\par
# task is skipped.\par
#display_skipped_hosts = True\par
\par
# by default, if a task in a playbook does not include a name: field then\par
# ansible-playbook will construct a header that includes the task's action but\par
# not the task's args.  This is a security feature because ansible cannot know\par
# if the *module* considers an argument to be no_log at the time that the\par
# header is printed.  If your environment doesn't have a problem securing\par
# stdout from ansible-playbook (or you have manually specified no_log in your\par
# playbook on all of the tasks where you have secret information) then you can\par
# safely set this to True to get more informative messages.\par
#display_args_to_stdout = False\par
\par
# by default (as of 1.3), Ansible will raise errors when attempting to dereference\par
# Jinja2 variables that are not set in templates or action lines. Uncomment this line\par
# to revert the behavior to pre-1.3.\par
#error_on_undefined_vars = False\par
\par
# by default (as of 1.6), Ansible may display warnings based on the configuration of the\par
# system running ansible itself. This may include warnings about 3rd party packages or\par
# other conditions that should be resolved if possible.\par
# to disable these warnings, set the following value to False:\par
#system_warnings = True\par
\par
# by default (as of 1.4), Ansible may display deprecation warnings for language\par
# features that should no longer be used and will be removed in future versions.\par
# to disable these warnings, set the following value to False:\par
#deprecation_warnings = True\par
\par
# (as of 1.8), Ansible can optionally warn when usage of the shell and\par
# command module appear to be simplified by using a default Ansible module\par
# instead.  These warnings can be silenced by adjusting the following\par
# setting or adding warn=yes or warn=no to the end of the command line\par
# parameter string.  This will for example suggest using the git module\par
# instead of shelling out to the git command.\par
# command_warnings = False\par
\par
\par
# set plugin path directories here, separate with colons\par
#action_plugins     = /usr/share/ansible/plugins/action\par
#become_plugins     = /usr/share/ansible/plugins/become\par
#cache_plugins      = /usr/share/ansible/plugins/cache\par
#callback_plugins   = /usr/share/ansible/plugins/callback\par
#connection_plugins = /usr/share/ansible/plugins/connection\par
#lookup_plugins     = /usr/share/ansible/plugins/lookup\par
#inventory_plugins  = /usr/share/ansible/plugins/inventory\par
#vars_plugins       = /usr/share/ansible/plugins/vars\par
#filter_plugins     = /usr/share/ansible/plugins/filter\par
#test_plugins       = /usr/share/ansible/plugins/test\par
#terminal_plugins   = /usr/share/ansible/plugins/terminal\par
#strategy_plugins   = /usr/share/ansible/plugins/strategy\par
\par
\par
# by default, ansible will use the 'linear' strategy but you may want to try\par
# another one\par
#strategy = free\par
\par
# by default callbacks are not loaded for /bin/ansible, enable this if you\par
# want, for example, a notification or logging callback to also apply to\par
# /bin/ansible runs\par
#bin_ansible_callbacks = False\par
\par
\par
# don't like cows?  that's unfortunate.\par
# set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1\par
#nocows = 1\par
\par
# set which cowsay stencil you'd like to use by default. When set to 'random',\par
# a random stencil will be selected for each task. The selection will be filtered\par
# against the `cow_whitelist` option below.\par
#cow_selection = default\par
#cow_selection = random\par
\par
# when using the 'random' option for cowsay, stencils will be restricted to this list.\par
# it should be formatted as a comma-separated list with no spaces between names.\par
# NOTE: line continuations here are for formatting purposes only, as the INI parser\par
#       in python does not support them.\par
#cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\\\par
#              hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\\\par
#              stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www\par
\par
# don't like colors either?\par
# set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1\par
#nocolor = 1\par
\par
# if set to a persistent type (not 'memory', for example 'redis') fact values\par
# from previous runs in Ansible will be stored.  This may be useful when\par
# wanting to use, for example, IP information from one group of servers\par
# without having to talk to them in the same playbook run to get their\par
# current IP information.\par
#fact_caching = memory\par
\par
#This option tells Ansible where to cache facts. The value is plugin dependent.\par
#For the jsonfile plugin, it should be a path to a local directory.\par
#For the redis plugin, the value is a host:port:database triplet: fact_caching_connection = localhost:6379:0\par
\par
#fact_caching_connection=/tmp\par
\par
\par
\par
# retry files\par
# When a playbook fails a .retry file can be created that will be placed in ~/\par
# You can enable this feature by setting retry_files_enabled to True\par
# and you can change the location of the files by setting retry_files_save_path\par
\par
#retry_files_enabled = False\par
#retry_files_save_path = ~/.ansible-retry\par
\par
# squash actions\par
# Ansible can optimise actions that call modules with list parameters\par
# when looping. Instead of calling the module once per with_ item, the\par
# module is called once with all items at once. Currently this only works\par
# under limited circumstances, and only with parameters named 'name'.\par
#squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper\par
\par
# prevents logging of task data, off by default\par
#no_log = False\par
\par
# prevents logging of tasks, but only on the targets, data is still logged on the master/controller\par
#no_target_syslog = False\par
\par
# controls whether Ansible will raise an error or warning if a task has no\par
# choice but to create world readable temporary files to execute a module on\par
# the remote machine.  This option is False by default for security.  Users may\par
# turn this on to have behaviour more like Ansible prior to 2.1.x.  See\par
# {{\field{\*\fldinst{HYPERLINK https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user }}{\fldrslt{https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user\ul0\cf0}}}}\f0\fs18\par
# for more secure ways to fix this than enabling this option.\par
#allow_world_readable_tmpfiles = False\par
\par
# controls the compression level of variables sent to\par
# worker processes. At the default of 0, no compression\par
# is used. This value must be an integer from 0 to 9.\par
#var_compression_level = 9\par
\par
# controls what compression method is used for new-style ansible modules when\par
# they are sent to the remote system.  The compression types depend on having\par
# support compiled into both the controller's python and the client's python.\par
# The names should match with the python Zipfile compression types:\par
# * ZIP_STORED (no compression. available everywhere)\par
# * ZIP_DEFLATED (uses zlib, the default)\par
# These values may be set per host via the ansible_module_compression inventory\par
# variable\par
#module_compression = 'ZIP_DEFLATED'\par
\par
# This controls the cutoff point (in bytes) on --diff for files\par
# set to 0 for unlimited (RAM may suffer!).\par
#max_diff_size = 1048576\par
\par
# This controls how ansible handles multiple --tags and --skip-tags arguments\par
# on the CLI.  If this is True then multiple arguments are merged together.  If\par
# it is False, then the last specified argument is used and the others are ignored.\par
# This option will be removed in 2.8.\par
#merge_multiple_cli_flags = True\par
\par
# Controls showing custom stats at the end, off by default\par
#show_custom_stats = True\par
\par
# Controls which files to ignore when using a directory as inventory with\par
# possibly multiple sources (both static and dynamic)\par
#inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo\par
\par
# This family of modules use an alternative execution path optimized for network appliances\par
# only update this setting if you know how this works, otherwise it can break module execution\par
#network_group_modules=eos, nxos, ios, iosxr, junos, vyos\par
\par
# When enabled, this option allows lookups (via variables like \{\{lookup('foo')\}\} or when used as\par
# a loop with `with_foo`) to return data that is not marked "unsafe". This means the data may contain\par
# jinja2 templating language which will be run through the templating engine.\par
# ENABLING THIS COULD BE A SECURITY RISK\par
#allow_unsafe_lookups = False\par
\par
# set default errors for all plays\par
#any_errors_fatal = False\par
\par
[inventory]\par
# enable inventory plugins, default: 'host_list', 'script', 'auto', 'yaml', 'ini', 'toml'\par
#enable_plugins = host_list, virtualbox, yaml, constructed\par
\par
# ignore these extensions when parsing a directory as inventory source\par
#ignore_extensions = .pyc, .pyo, .swp, .bak, ~, .rpm, .md, .txt, ~, .orig, .ini, .cfg, .retry\par
\par
# ignore files matching these patterns when parsing a directory as inventory source\par
#ignore_patterns=\par
\par
# If 'true' unparsed inventory sources become fatal errors, they are warnings otherwise.\par
#unparsed_is_failed=False\par
\par
[privilege_escalation]\par
#become=True\par
#become_method=sudo\par
#become_user=root\par
#become_ask_pass=False\par
\par
[paramiko_connection]\par
\par
# uncomment this line to cause the paramiko connection plugin to not record new host\par
# keys encountered.  Increases performance on new host additions.  Setting works independently of the\par
# host key checking setting above.\par
#record_host_keys=False\par
\par
# by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this\par
# line to disable this behaviour.\par
#pty=False\par
\par
# paramiko will default to looking for SSH keys initially when trying to\par
# authenticate to remote devices.  This is a problem for some network devices\par
# that close the connection after a key failure.  Uncomment this line to\par
# disable the Paramiko look for keys function\par
#look_for_keys = False\par
\par
# When using persistent connections with Paramiko, the connection runs in a\par
# background process.  If the host doesn't already have a valid SSH key, by\par
# default Ansible will prompt to add the host key.  This will cause connections\par
# running in background processes to fail.  Uncomment this line to have\par
# Paramiko automatically add host keys.\par
#host_key_auto_add = True\par
\par
[ssh_connection]\par
\par
# ssh arguments to use\par
# Leaving off ControlPersist will result in poor performance, so use\par
# paramiko on older platforms rather than removing it, -C controls compression use\par
#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s\par
\par
# The base directory for the ControlPath sockets.\par
# This is the "%(directory)s" in the control_path option\par
#\par
# Example:\par
# control_path_dir = /tmp/.ansible/cp\par
#control_path_dir = ~/.ansible/cp\par
\par
# The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname,\par
# port and username (empty string in the config). The hash mitigates a common problem users\par
# found with long hostnames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format.\par
# In those cases, a "too long for Unix domain socket" ssh error would occur.\par
#\par
# Example:\par
# control_path = %(directory)s/%%h-%%r\par
#control_path =\par
\par
# Enabling pipelining reduces the number of SSH operations required to\par
# execute a module on the remote server. This can result in a significant\par
# performance improvement when enabled, however when using "sudo:" you must\par
# first disable 'requiretty' in /etc/sudoers\par
#\par
# By default, this option is disabled to preserve compatibility with\par
# sudoers configurations that have requiretty (the default on many distros).\par
#\par
#pipelining = False\par
\par
# Control the mechanism for transferring files (old)\par
#   * smart = try sftp and then try scp [default]\par
#   * True = use scp only\par
#   * False = use sftp only\par
#scp_if_ssh = smart\par
\par
# Control the mechanism for transferring files (new)\par
# If set, this will override the scp_if_ssh option\par
#   * sftp  = use sftp to transfer files\par
#   * scp   = use scp to transfer files\par
#   * piped = use 'dd' over SSH to transfer files\par
#   * smart = try sftp, scp, and piped, in that order [default]\par
#transfer_method = smart\par
\par
# if False, sftp will not use batch mode to transfer files. This may cause some\par
# types of file transfer failures impossible to catch however, and should\par
# only be disabled if your sftp version has problems with batch mode\par
#sftp_batch_mode = False\par
\par
# The -tt argument is passed to ssh when pipelining is not enabled because sudo\par
# requires a tty by default.\par
#usetty = True\par
\par
# Number of times to retry an SSH connection to a host, in case of UNREACHABLE.\par
# For each retry attempt, there is an exponential backoff,\par
# so after the first attempt there is 1s wait, then 2s, 4s etc. up to 30s (max).\par
#retries = 3\par
\par
[persistent_connection]\par
\par
# Configures the persistent connection timeout value in seconds.  This value is\par
# how long the persistent connection will remain idle before it is destroyed.\par
# If the connection doesn't receive a request before the timeout value\par
# expires, the connection is shutdown. The default value is 30 seconds.\par
#connect_timeout = 30\par
\par
# The command timeout value defines the amount of time to wait for a command\par
# or RPC call before timing out. The value for the command timeout must\par
# be less than the value of the persistent connection idle timeout (connect_timeout)\par
# The default value is 30 second.\par
#command_timeout = 30\par
\par
[accelerate]\par
#accelerate_port = 5099\par
#accelerate_timeout = 30\par
#accelerate_connect_timeout = 5.0\par
\par
# The daemon timeout is measured in minutes. This time is measured\par
# from the last activity to the accelerate daemon.\par
#accelerate_daemon_timeout = 30\par
\par
# If set to yes, accelerate_multi_key will allow multiple\par
# private keys to be uploaded to it, though each user must\par
# have access to the system via SSH to add a new key. The default\par
# is "no".\par
#accelerate_multi_key = yes\par
\par
[selinux]\par
# file systems that require special treatment when dealing with security context\par
# the default behaviour that copies the existing context or uses the user default\par
# needs to be changed to use the file system dependent context.\par
#special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p,vfat\par
\par
# Set this to yes to allow libvirt_lxc connections to work without SELinux.\par
#libvirt_lxc_noseclabel = yes\par
\par
[colors]\par
#highlight = white\par
#verbose = blue\par
#warn = bright purple\par
#error = red\par
#debug = dark gray\par
#deprecate = purple\par
#skip = cyan\par
#unreachable = red\par
#ok = green\par
#changed = yellow\par
#diff_add = green\par
#diff_remove = red\par
#diff_lines = cyan\par
\par
\par
[diff]\par
# Always print diff when running ( same as always running with -D/--diff )\par
# always = no\par
\par
# Set how many context lines to show in diff\par
# context = 3\par
\f1\fs22\par
}
 